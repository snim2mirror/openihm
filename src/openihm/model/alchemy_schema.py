#autogenerated by sqlautocode
# generated with sqlautocode "mysql+mysqldb://root:somepassword@mysql-openihm/openihm" -d -o model/alchemy_schema.py

from sqlalchemy import *
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relation
from sqlalchemy.dialects.mysql import *


DeclarativeBase = declarative_base()
metadata = DeclarativeBase.metadata

class Absencefromhousehold(DeclarativeBase):
    __tablename__ = 'absencefromhousehold'

    __table_args__ = {}

    #column definitions
    hhid = Column(u'hhid', Integer, ForeignKey('householdmembers.hhid'), nullable=False)
    id = Column(u'id', Integer, primary_key=True, nullable=False)
    percentageaway = Column(u'percentageaway', DOUBLE(asdecimal=True), nullable=False)
    personid = Column(u'personid', VARCHAR(length=20), ForeignKey('householdmembers.personid'), nullable=False)
    pid = Column(u'pid', Integer, ForeignKey('householdmembers.pid'), nullable=False)
    reason = Column(u'reason', VARCHAR(length=200), nullable=False)
    whereto = Column(u'whereto', VARCHAR(length=200), nullable=False)

    #relation definitions
    householdmembers = relation('Householdmember', primaryjoin="and_(Absencefromhousehold.personid==Householdmember.personid, Absencefromhousehold.hhid==Householdmember.hhid, Absencefromhousehold.pid==Householdmember.pid)")


class Asset(DeclarativeBase):
    __tablename__ = 'assets'

    __table_args__ = {}

    #column definitions
    assetcategory = Column(u'assetcategory', VARCHAR(length=255), nullable=False)
    assetid = Column(u'assetid', Integer, primary_key=True, nullable=False)
    assettype = Column(u'assettype', VARCHAR(length=100), nullable=False)
    hhid = Column(u'hhid', Integer, ForeignKey('households.hhid'), primary_key=True, nullable=False)
    pid = Column(u'pid', Integer, ForeignKey('households.pid'), primary_key=True, nullable=False)
    totalunits = Column(u'totalunits', DOUBLE(asdecimal=True), nullable=False)
    unitcost = Column(u'unitcost', DOUBLE(asdecimal=True), nullable=False)
    unitofmeasure = Column(u'unitofmeasure', VARCHAR(length=45), nullable=False)

    #relation definitions
    households = relation('Household', primaryjoin="and_(Asset.hhid==Household.hhid, Asset.pid==Household.pid)")


class Assettype(DeclarativeBase):
    __tablename__ = 'assettypes'

    __table_args__ = {}

    #column definitions
    assettype = Column(u'assettype', VARCHAR(length=100), primary_key=True, nullable=False)

    #relation definitions


class Creditandloan(DeclarativeBase):
    __tablename__ = 'creditandloans'

    __table_args__ = {}

    #column definitions
    creditsource = Column(u'creditsource', VARCHAR(length=200))
    credituse = Column(u'credituse', VARCHAR(length=200))
    creditvalue = Column(u'creditvalue', DOUBLE(asdecimal=True))
    id = Column(u'id', Integer, primary_key=True, autoincrement=False, nullable=False)
    unit = Column(u'unit', VARCHAR(length=45))

    #relation definitions


class Cropincome(DeclarativeBase):
    __tablename__ = 'cropincome'

    __table_args__ = {}

    #column definitions
    hhid = Column(u'hhid', Integer, ForeignKey('households.hhid'), primary_key=True, nullable=False)
    id = Column(u'id', Integer, primary_key=True, nullable=False)
    incomesource = Column(u'incomesource', VARCHAR(length=200))
    otheruses = Column(u'otheruses', DOUBLE(asdecimal=True), server_default=text(u"'0'"))
    pid = Column(u'pid', Integer, ForeignKey('households.pid'), primary_key=True, nullable=False)
    preferenceprice = Column(u'preferenceprice', DOUBLE(asdecimal=True), server_default=text(u"'100'"))
    preferenceproduction = Column(u'preferenceproduction', DOUBLE(asdecimal=True), server_default=text(u"'100'"))
    unitofmeasure = Column(u'unitofmeasure', VARCHAR(length=45))
    unitprice = Column(u'unitprice', DOUBLE(asdecimal=True))
    unitsconsumed = Column(u'unitsconsumed', DOUBLE(asdecimal=True), server_default=text(u"'0'"))
    unitsproduced = Column(u'unitsproduced', DOUBLE(asdecimal=True), server_default=text(u"'0'"))
    unitssold = Column(u'unitssold', DOUBLE(asdecimal=True))

    #relation definitions
    households = relation('Household', primaryjoin="and_(Cropincome.hhid==Household.hhid, Cropincome.pid==Household.pid)")


class Currency(DeclarativeBase):
    __tablename__ = 'currencies'

    __table_args__ = {}

    #column definitions
    abbreviation = Column(u'abbreviation', VARCHAR(length=45), nullable=False)
    currencyname = Column(u'currencyname', VARCHAR(length=250), nullable=False)
    id = Column(u'id', Integer, primary_key=True, nullable=False)
    symbol = Column(u'symbol', VARCHAR(length=45))

    #relation definitions


class Dbupdate(DeclarativeBase):
    __tablename__ = 'dbupdate'

    __table_args__ = {}

    #column definitions
    lastupdate = Column(u'lastupdate', VARCHAR(length=50), primary_key=True, nullable=False)

    #relation definitions


class Diet(DeclarativeBase):
    __tablename__ = 'diet'

    __table_args__ = {}

    #column definitions
    fooditem = Column(u'fooditem', VARCHAR(length=45), nullable=False)
    id = Column(u'id', Integer, primary_key=True, nullable=False)
    modelprice = Column(u'modelprice', DOUBLE(asdecimal=True), nullable=False, server_default=text(u"'0'"))
    percentage = Column(u'percentage', DOUBLE(asdecimal=True), nullable=False)
    pid = Column(u'pid', Integer, ForeignKey('projects.pid'), primary_key=True, nullable=False)
    priceperunit = Column(u'priceperunit', DOUBLE(asdecimal=True), nullable=False)
    unitofmeasure = Column(u'unitofmeasure', VARCHAR(length=45), nullable=False)

    #relation definitions
    projects = relation('Project', primaryjoin='Diet.pid==Project.pid')


class Employmentincome(DeclarativeBase):
    __tablename__ = 'employmentincome'

    __table_args__ = {}

    #column definitions
    cashincome = Column(u'cashincome', DOUBLE(asdecimal=True))
    foodtypepaid = Column(u'foodtypepaid', VARCHAR(length=200))
    hhid = Column(u'hhid', Integer, ForeignKey('households.hhid'), primary_key=True, nullable=False)
    id = Column(u'id', Integer, primary_key=True, nullable=False)
    incomekcal = Column(u'incomekcal', DOUBLE(asdecimal=True))
    incomesource = Column(u'incomesource', VARCHAR(length=200))
    pid = Column(u'pid', Integer, ForeignKey('households.pid'), primary_key=True, nullable=False)
    preferenceincome = Column(u'preferenceincome', DOUBLE(asdecimal=True), server_default=text(u"'100'"))
    unitofmeasure = Column(u'unitofmeasure', VARCHAR(length=45))
    unitspaid = Column(u'unitspaid', DOUBLE(asdecimal=True))

    #relation definitions
    households = relation('Household', primaryjoin="and_(Employmentincome.hhid==Household.hhid, Employmentincome.pid==Household.pid)")


class Expenditure(DeclarativeBase):
    __tablename__ = 'expenditure'

    __table_args__ = {}

    #column definitions
    expid = Column(u'expid', Integer, primary_key=True, nullable=False)
    exptype = Column(u'exptype', VARCHAR(length=100))
    hhid = Column(u'hhid', Integer, ForeignKey('households.hhid'), primary_key=True, nullable=False)
    kcalperunit = Column(u'kcalperunit', DOUBLE(asdecimal=True))
    pid = Column(u'pid', Integer, ForeignKey('households.pid'), primary_key=True, nullable=False)
    priceperunit = Column(u'priceperunit', DOUBLE(asdecimal=True))
    totalunits = Column(u'totalunits', DOUBLE(asdecimal=True))
    unitofmeasure = Column(u'unitofmeasure', VARCHAR(length=45))

    #relation definitions
    households = relation('Household', primaryjoin="and_(Expenditure.hhid==Household.hhid, Expenditure.pid==Household.pid)")


class Globalcharacteristic(DeclarativeBase):
    __tablename__ = 'globalcharacteristics'

    __table_args__ = {}

    #column definitions
    characteristic = Column(u'characteristic', VARCHAR(length=250), primary_key=True, nullable=False)
    chartype = Column(u'chartype', VARCHAR(length=50), nullable=False)
    datatype = Column(u'datatype', Integer, nullable=False)
    description = Column(u'description', VARCHAR(length=250))

    #relation definitions


class Globalhouseholdcharacteristic(DeclarativeBase):
    __tablename__ = 'globalhouseholdcharacteristics'

    __table_args__ = {}

    #column definitions
    characteristic = Column(u'characteristic', VARCHAR(length=250), nullable=False)
    datatype = Column(u'datatype', Integer, nullable=False)
    description = Column(u'description', VARCHAR(length=250))
    id = Column(u'id', Integer, primary_key=True, nullable=False)

    #relation definitions


class Globalpersonalcharacteristic(DeclarativeBase):
    __tablename__ = 'globalpersonalcharacteristics'

    __table_args__ = {}

    #column definitions
    characteristic = Column(u'characteristic', VARCHAR(length=250))
    datatype = Column(u'datatype', Integer)
    description = Column(u'description', VARCHAR(length=250))
    id = Column(u'id', Integer, primary_key=True, nullable=False)

    #relation definitions


class Household(DeclarativeBase):
    __tablename__ = 'households'

    __table_args__ = {}

    #column definitions
    dateofcollection = Column(u'dateofcollection', DATE(), nullable=False)
    hhid = Column(u'hhid', Integer, primary_key=True, autoincrement=False, nullable=False)
    householdname = Column(u'householdname', VARCHAR(length=100), nullable=False)
    pid = Column(u'pid', Integer, ForeignKey('projects.pid'), primary_key=True, nullable=False)
    totalassetvalue = Column(u'totalassetvalue', DOUBLE(asdecimal=True), nullable=False, server_default=text(u"'0'"))
    totalexpenditure = Column(u'totalexpenditure', DOUBLE(asdecimal=True), nullable=False, server_default=text(u"'0'"))
    totalincomevalue = Column(u'totalincomevalue', DOUBLE(asdecimal=True), nullable=False, server_default=text(u"'0'"))

    #relation definitions
    projects = relation('Project', primaryjoin='Household.pid==Project.pid')


class Householdcharacteristic(DeclarativeBase):
    __tablename__ = 'householdcharacteristics'

    __table_args__ = {}

    #column definitions
    characteristic = Column(u'characteristic', VARCHAR(length=250), primary_key=True, nullable=False)
    charvalue = Column(u'charvalue', VARCHAR(length=255), nullable=False)
    hhid = Column(u'hhid', Integer, ForeignKey('households.hhid'), primary_key=True, nullable=False)
    pid = Column(u'pid', Integer, ForeignKey('households.pid'), primary_key=True, nullable=False)

    #relation definitions
    households = relation('Household', primaryjoin="and_(Householdcharacteristic.hhid==Household.hhid, Householdcharacteristic.pid==Household.pid)")


class Householdmember(DeclarativeBase):
    __tablename__ = 'householdmembers'

    __table_args__ = {}

    #column definitions
    education = Column(u'education', VARCHAR(length=200))
    headofhousehold = Column(u'headofhousehold', Enum(u'Yes', u'No'), nullable=False)
    hhid = Column(u'hhid', Integer, ForeignKey('households.hhid'), primary_key=True, nullable=False)
    periodaway = Column(u'periodaway', Integer, server_default=text(u"'0'"))
    personid = Column(u'personid', VARCHAR(length=20), primary_key=True, nullable=False)
    pid = Column(u'pid', Integer, ForeignKey('households.pid'), primary_key=True, nullable=False)
    reason = Column(u'reason', VARCHAR(length=200))
    sex = Column(u'sex', Enum(u'Male', u'Female'), nullable=False)
    whereto = Column(u'whereto', VARCHAR(length=200))
    yearofbirth = Column(u'yearofbirth', Integer, nullable=False)

    #relation definitions
    households = relation('Household', primaryjoin="and_(Householdmember.hhid==Household.hhid, Householdmember.pid==Household.pid)")


class Incomeseasonality(DeclarativeBase):
    __tablename__ = 'incomeseasonality'

    __table_args__ = {}

    #column definitions
    apr = Column(u'apr', DOUBLE(asdecimal=True), nullable=False)
    aug = Column(u'aug', DOUBLE(asdecimal=True), nullable=False)
    dec = Column(u'dec', DOUBLE(asdecimal=True), nullable=False)
    feb = Column(u'feb', DOUBLE(asdecimal=True), nullable=False)
    incometype = Column(u'incometype', VARCHAR(length=45), primary_key=True, nullable=False)
    jan = Column(u'jan', DOUBLE(asdecimal=True), nullable=False)
    jul = Column(u'jul', DOUBLE(asdecimal=True), nullable=False)
    jun = Column(u'jun', DOUBLE(asdecimal=True), nullable=False)
    mar = Column(u'mar', DOUBLE(asdecimal=True), nullable=False)
    may = Column(u'may', DOUBLE(asdecimal=True), nullable=False)
    nov = Column(u'nov', DOUBLE(asdecimal=True), nullable=False)
    oct = Column(u'oct', DOUBLE(asdecimal=True), nullable=False)
    sep = Column(u'sep', DOUBLE(asdecimal=True), nullable=False)

    #relation definitions


class Livestockincome(DeclarativeBase):
    __tablename__ = 'livestockincome'

    __table_args__ = {}

    #column definitions
    hhid = Column(u'hhid', Integer, ForeignKey('households.hhid'), primary_key=True, nullable=False)
    id = Column(u'id', Integer, primary_key=True, nullable=False)
    incomesource = Column(u'incomesource', VARCHAR(length=200))
    otheruses = Column(u'otheruses', DOUBLE(asdecimal=True), server_default=text(u"'0'"))
    pid = Column(u'pid', Integer, ForeignKey('households.pid'), primary_key=True, nullable=False)
    preferenceprice = Column(u'preferenceprice', DOUBLE(asdecimal=True), server_default=text(u"'100'"))
    preferenceproduction = Column(u'preferenceproduction', DOUBLE(asdecimal=True), server_default=text(u"'100'"))
    unitofmeasure = Column(u'unitofmeasure', VARCHAR(length=45))
    unitprice = Column(u'unitprice', DOUBLE(asdecimal=True))
    unitsconsumed = Column(u'unitsconsumed', DOUBLE(asdecimal=True), server_default=text(u"'0'"))
    unitsproduced = Column(u'unitsproduced', DOUBLE(asdecimal=True), server_default=text(u"'0'"))
    unitssold = Column(u'unitssold', DOUBLE(asdecimal=True))

    #relation definitions
    households = relation('Household', primaryjoin="and_(Livestockincome.hhid==Household.hhid, Livestockincome.pid==Household.pid)")


class LookupEnergyNeed(DeclarativeBase):
    __tablename__ = 'lookup_energy_needs'

    __table_args__ = {}

    #column definitions
    age = Column(u'age', Integer, primary_key=True, autoincrement=False, nullable=False)
    kCalNeedF = Column(u'kCalNeedF', Integer)
    kCalNeedM = Column(u'kCalNeedM', Integer)

    #relation definitions


class Personalcharacteristic(DeclarativeBase):
    __tablename__ = 'personalcharacteristics'

    __table_args__ = {}

    #column definitions
    characteristic = Column(u'characteristic', VARCHAR(length=250), primary_key=True, nullable=False)
    charvalue = Column(u'charvalue', VARCHAR(length=255), nullable=False)
    hhid = Column(u'hhid', Integer, ForeignKey('householdmembers.hhid'), primary_key=True, nullable=False)
    personid = Column(u'personid', VARCHAR(length=20), ForeignKey('householdmembers.personid'), primary_key=True, nullable=False)
    pid = Column(u'pid', Integer, ForeignKey('householdmembers.pid'), primary_key=True, nullable=False)

    #relation definitions
    householdmembers = relation('Householdmember', primaryjoin="and_(Personalcharacteristic.personid==Householdmember.personid, Personalcharacteristic.hhid==Householdmember.hhid, Personalcharacteristic.pid==Householdmember.pid)")


class Project(DeclarativeBase):
    __tablename__ = 'projects'

    __table_args__ = {}

    #column definitions
    currency = Column(u'currency', TEXT(), nullable=False)
    description = Column(u'description', TEXT(), nullable=False)
    enddate = Column(u'enddate', DATE(), nullable=False)
    pid = Column(u'pid', Integer, primary_key=True, nullable=False)
    projectname = Column(u'projectname', VARCHAR(length=100), nullable=False)
    startdate = Column(u'startdate', DATE(), nullable=False)

    #relation definitions


class Projectasset(DeclarativeBase):
    __tablename__ = 'projectassets'

    __table_args__ = {}

    #column definitions
    assetname = Column(u'assetname', VARCHAR(length=255), primary_key=True, nullable=False)
    assettype = Column(u'assettype', VARCHAR(length=45), nullable=False)
    pid = Column(u'pid', Integer, ForeignKey('projects.pid'), primary_key=True, nullable=False)

    #relation definitions
    projects = relation('Project', primaryjoin='Projectasset.pid==Project.pid')


class Projectcharacteristic(DeclarativeBase):
    __tablename__ = 'projectcharacteristics'

    __table_args__ = {}

    #column definitions
    characteristic = Column(u'characteristic', VARCHAR(length=250), primary_key=True, nullable=False)
    chartype = Column(u'chartype', VARCHAR(length=50), nullable=False)
    datatype = Column(u'datatype', Integer, nullable=False)
    pid = Column(u'pid', Integer, ForeignKey('projects.pid'), primary_key=True, nullable=False)

    #relation definitions
    projects = relation('Project', primaryjoin='Projectcharacteristic.pid==Project.pid')


class Projectincomesource(DeclarativeBase):
    __tablename__ = 'projectincomesources'

    __table_args__ = {}

    #column definitions
    incomesource = Column(u'incomesource', VARCHAR(length=255), primary_key=True, nullable=False)
    incometype = Column(u'incometype', VARCHAR(length=45), primary_key=True, nullable=False)
    pid = Column(u'pid', Integer, ForeignKey('projects.pid'), primary_key=True, nullable=False)

    #relation definitions
    projects = relation('Project', primaryjoin='Projectincomesource.pid==Project.pid')


class Savingscategory(DeclarativeBase):
    __tablename__ = 'savingscategories'

    __table_args__ = {}

    #column definitions
    savingscategory = Column(u'savingscategory', VARCHAR(length=100), primary_key=True, nullable=False)

    #relation definitions


class SetupAsset(DeclarativeBase):
    __tablename__ = 'setup_assets'

    __table_args__ = {}

    #column definitions
    assetname = Column(u'assetname', VARCHAR(length=255), primary_key=True, nullable=False)
    assettype = Column(u'assettype', VARCHAR(length=50), nullable=False)
    unitofmeasure = Column(u'unitofmeasure', VARCHAR(length=45), nullable=False)

    #relation definitions


class SetupCrop(DeclarativeBase):
    __tablename__ = 'setup_crops'

    __table_args__ = {}

    #column definitions
    energyvalueperunit = Column(u'energyvalueperunit', DOUBLE(asdecimal=True))
    foodtype = Column(u'foodtype', VARCHAR(length=100), primary_key=True, nullable=False)
    measuringunit = Column(u'measuringunit', VARCHAR(length=45))

    #relation definitions


class SetupEmployment(DeclarativeBase):
    __tablename__ = 'setup_employment'

    __table_args__ = {}

    #column definitions
    id = Column(u'id', Integer, primary_key=True, nullable=False)
    incomesource = Column(u'incomesource', VARCHAR(length=200))

    #relation definitions


class SetupExpenditurecategory(DeclarativeBase):
    __tablename__ = 'setup_expenditurecategories'

    __table_args__ = {}

    #column definitions
    expenditurecategory = Column(u'expenditurecategory', VARCHAR(length=200))
    id = Column(u'id', Integer, primary_key=True, nullable=False)

    #relation definitions


class SetupExpendituretype(DeclarativeBase):
    __tablename__ = 'setup_expendituretypes'

    __table_args__ = {}

    #column definitions
    expendituretype = Column(u'expendituretype', VARCHAR(length=200))
    id = Column(u'id', Integer, primary_key=True, nullable=False)

    #relation definitions


class SetupFoodsCrop(DeclarativeBase):
    __tablename__ = 'setup_foods_crops'

    __table_args__ = {}

    #column definitions
    category = Column(u'category', VARCHAR(length=200), nullable=False)
    energyvalueperunit = Column(u'energyvalueperunit', DOUBLE(asdecimal=True))
    name = Column(u'name', VARCHAR(length=200), primary_key=True, nullable=False)
    unitofmeasure = Column(u'unitofmeasure', VARCHAR(length=45))

    #relation definitions


class SetupLandtype(DeclarativeBase):
    __tablename__ = 'setup_landtypes'

    __table_args__ = {}

    #column definitions
    id = Column(u'id', Integer, primary_key=True, nullable=False)
    landtype = Column(u'landtype', VARCHAR(length=200))
    unitofmeasure = Column(u'unitofmeasure', VARCHAR(length=45))

    #relation definitions


class SetupLivestock(DeclarativeBase):
    __tablename__ = 'setup_livestock'

    __table_args__ = {}

    #column definitions
    energyvalueperunit = Column(u'energyvalueperunit', DOUBLE(asdecimal=True))
    incomesource = Column(u'incomesource', VARCHAR(length=200), primary_key=True, nullable=False, server_default=text(u"''"))
    unitofmeasure = Column(u'unitofmeasure', VARCHAR(length=45))

    #relation definitions


class SetupStandardofliving(DeclarativeBase):
    __tablename__ = 'setup_standardofliving'

    __table_args__ = {}

    #column definitions
    item = Column(u'item', VARCHAR(length=255), primary_key=True, nullable=False)
    type = Column(u'type', Enum(u'Household', u'Person', u'Both'), nullable=False)

    #relation definitions


class SetupTradablegood(DeclarativeBase):
    __tablename__ = 'setup_tradablegoods'

    __table_args__ = {}

    #column definitions
    id = Column(u'id', Integer, primary_key=True, nullable=False)
    tradablegoodtype = Column(u'tradablegoodtype', VARCHAR(length=200), nullable=False)
    unitofmeasure = Column(u'unitofmeasure', VARCHAR(length=45), nullable=False)

    #relation definitions


class SetupTransfer(DeclarativeBase):
    __tablename__ = 'setup_transfers'

    __table_args__ = {}

    #column definitions
    assistancetype = Column(u'assistancetype', VARCHAR(length=200), primary_key=True, nullable=False)
    sourceoftransfer = Column(u'sourceoftransfer', VARCHAR(length=200), primary_key=True, nullable=False)
    unitofmeasure = Column(u'unitofmeasure', VARCHAR(length=45))

    #relation definitions


class SetupTransfersource(DeclarativeBase):
    __tablename__ = 'setup_transfersources'

    __table_args__ = {}

    #column definitions
    id = Column(u'id', Integer, primary_key=True, nullable=False)
    sourcetype = Column(u'sourcetype', Enum(u'Internal', u'External'), nullable=False)

    #relation definitions


class SetupTreetype(DeclarativeBase):
    __tablename__ = 'setup_treetypes'

    __table_args__ = {}

    #column definitions
    measuringunit = Column(u'measuringunit', VARCHAR(length=45))
    treetype = Column(u'treetype', VARCHAR(length=100), primary_key=True, nullable=False)

    #relation definitions


class SetupWildfood(DeclarativeBase):
    __tablename__ = 'setup_wildfoods'

    __table_args__ = {}

    #column definitions
    energyvalueperunit = Column(u'energyvalueperunit', DOUBLE(asdecimal=True))
    incomesource = Column(u'incomesource', VARCHAR(length=200), primary_key=True, nullable=False, server_default=text(u"''"))
    unitofmeasure = Column(u'unitofmeasure', VARCHAR(length=45))

    #relation definitions


class Standardofliving(DeclarativeBase):
    __tablename__ = 'standardofliving'

    __table_args__ = {}

    #column definitions
    agebottom = Column(u'agebottom', Integer, server_default=text(u"'0'"))
    agetop = Column(u'agetop', Integer, server_default=text(u"'0'"))
    costperyear = Column(u'costperyear', DOUBLE(asdecimal=True), nullable=False)
    gender = Column(u'gender', Enum(u'Male', u'Female', u'All'))
    item = Column(u'item', VARCHAR(length=255), nullable=False)
    modelprice = Column(u'modelprice', DOUBLE(asdecimal=True), server_default=text(u"'0'"))
    pid = Column(u'pid', Integer, ForeignKey('projects.pid'), primary_key=True, nullable=False)
    scope = Column(u'scope', Enum(u'Household', u'Person'), nullable=False)
    summary = Column(u'summary', VARCHAR(length=255), primary_key=True, nullable=False)

    #relation definitions
    projects = relation('Project', primaryjoin='Standardofliving.pid==Project.pid')


class Transfer(DeclarativeBase):
    __tablename__ = 'transfers'

    __table_args__ = {}

    #column definitions
    cashperyear = Column(u'cashperyear', DOUBLE(asdecimal=True), server_default=text(u"'0'"))
    foodtype = Column(u'foodtype', VARCHAR(length=255))
    hhid = Column(u'hhid', Integer, ForeignKey('households.hhid'), primary_key=True, nullable=False)
    id = Column(u'id', Integer, primary_key=True, nullable=False)
    pid = Column(u'pid', Integer, ForeignKey('households.pid'), primary_key=True, nullable=False)
    preferenceprice = Column(u'preferenceprice', DOUBLE(asdecimal=True), server_default=text(u"'100'"))
    preferenceproduction = Column(u'preferenceproduction', DOUBLE(asdecimal=True), server_default=text(u"'100'"))
    priceperunit = Column(u'priceperunit', DOUBLE(asdecimal=True), server_default=text(u"'0'"))
    sourceoftransfer = Column(u'sourceoftransfer', VARCHAR(length=255), nullable=False)
    sourcetype = Column(u'sourcetype', Enum(u'Internal', u'External'), nullable=False)
    unitofmeasure = Column(u'unitofmeasure', VARCHAR(length=45))
    unitsconsumed = Column(u'unitsconsumed', DOUBLE(asdecimal=True), server_default=text(u"'0'"))
    unitsgiven = Column(u'unitsgiven', DOUBLE(asdecimal=True), server_default=text(u"'0'"))
    unitssold = Column(u'unitssold', DOUBLE(asdecimal=True), server_default=text(u"'0'"))

    #relation definitions
    households = relation('Household', primaryjoin="and_(Transfer.hhid==Household.hhid, Transfer.pid==Household.pid)")


class Transferlog(DeclarativeBase):
    __tablename__ = 'transferlog'

    __table_args__ = {}

    #column definitions
    currency = Column(u'currency', VARCHAR(length=45), nullable=False)
    datecollected = Column(u'datecollected', VARCHAR(length=45), nullable=False)
    pid = Column(u'pid', Integer, ForeignKey('projects.pid'), primary_key=True, nullable=False)
    pid_access = Column(u'pid_access', Integer, nullable=False)
    projectname = Column(u'projectname', VARCHAR(length=45), nullable=False)

    #relation definitions
    projects = relation('Project', primaryjoin='Transferlog.pid==Project.pid')


class Wildfood(DeclarativeBase):
    __tablename__ = 'wildfoods'

    __table_args__ = {}

    #column definitions
    hhid = Column(u'hhid', Integer, ForeignKey('households.hhid'), primary_key=True, nullable=False)
    id = Column(u'id', Integer, primary_key=True, nullable=False)
    incomesource = Column(u'incomesource', VARCHAR(length=200))
    otheruses = Column(u'otheruses', DOUBLE(asdecimal=True), server_default=text(u"'0'"))
    pid = Column(u'pid', Integer, ForeignKey('households.pid'), primary_key=True, nullable=False)
    preferenceprice = Column(u'preferenceprice', DOUBLE(asdecimal=True), server_default=text(u"'100'"))
    preferenceproduction = Column(u'preferenceproduction', DOUBLE(asdecimal=True), server_default=text(u"'100'"))
    unitofmeasure = Column(u'unitofmeasure', VARCHAR(length=45))
    unitprice = Column(u'unitprice', DOUBLE(asdecimal=True))
    unitsconsumed = Column(u'unitsconsumed', DOUBLE(asdecimal=True), server_default=text(u"'0'"))
    unitsproduced = Column(u'unitsproduced', DOUBLE(asdecimal=True), server_default=text(u"'0'"))
    unitssold = Column(u'unitssold', DOUBLE(asdecimal=True))

    #relation definitions
    households = relation('Household', primaryjoin="and_(Wildfood.hhid==Household.hhid, Wildfood.pid==Household.pid)")


